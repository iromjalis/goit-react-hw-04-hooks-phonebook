{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/ContactForm/ContactFormName.jsx","components/ContactForm/ContactFormNumber.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","ContactFormName","title","onChange","value","nameInputId","htmlFor","TextField","id","label","variant","placeholder","type","name","pattern","required","ContactFormNumber","ContactForm","onSubmit","useState","setName","number","setNumber","shortid","generate","handleChange","e","target","className","css","ContactFormWrapper","preventDefault","ButtonGroup","Button","ContactList","contacts","onDeleteContact","map","ContactItem","ContactItem_number","Btn","onClick","Container","children","ContainerWrapper","Filter","onFilterChange","action","defaultProps","App","initialContacts","filter","setFilter","JSON","parse","window","localStorage","getItem","setContacts","useEffect","setItem","stringify","data","some","contact","alert","currentTarget","toLocaleLowerCase","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12e80694.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactItem\":\"ContactList_ContactItem__1sIcG\",\"ContactItem_number\":\"ContactList_ContactItem_number__33bEr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactFormWrapper\":\"ContactForm_ContactFormWrapper__2UAlO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContainerWrapper\":\"Container_ContainerWrapper__1KD5N\"};","import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst ContactFormName = ({ title, onChange, value, nameInputId }) => {\r\n  return (\r\n    <>\r\n      <label htmlFor={nameInputId}>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label={title}\r\n          variant=\"outlined\"\r\n          value={value}\r\n          placeholder={title}\r\n          onChange={onChange}\r\n          type=\"tel\"\r\n          name={title}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactFormName;\r\n","import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst ContactFormNumber = ({ title, onChange, value }) => {\r\n  return (\r\n    <>\r\n      <label htmlFor=\"\">\r\n        {/* {title} */}\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label={title}\r\n          variant=\"outlined\"\r\n          value={value}\r\n          placeholder={title}\r\n          onChange={onChange}\r\n          type=\"tel\"\r\n          name={title}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactFormNumber;\r\n","import React, { useState } from \"react\";\nimport shortid from \"shortid\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\n\nimport css from \"./ContactForm.module.css\";\nimport ContactFormName from \"./ContactFormName\";\nimport ContactFormNumber from \"./ContactFormNumber\";\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = shortid.generate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (e.target.name === \"name\") {\n      setName(value);\n    } else setNumber(value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const data = { name, number };\n    onSubmit(data);\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={css.ContactFormWrapper} onSubmit={handleSubmit}>\n      <ContactFormName\n        nameInputId={nameInputId}\n        title=\"name\"\n        value={name}\n        onChange={handleChange}\n      />\n      <ContactFormNumber\n        title=\"number\"\n        value={number}\n        onChange={handleChange}\n      />\n\n      <ButtonGroup\n        variant=\"contained\"\n        aria-label=\"outlined primary button group\"\n      >\n        <Button type=\"submit\">Send</Button>\n      </ButtonGroup>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport css from \"./ContactList.module.css\";\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <div className=\"ContactListWrapper\">\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={css.ContactItem}>\n            <span>{name}: </span>\n            <span className={css.ContactItem_number}>{number}</span>\n            <ButtonGroup\n              variant=\"contained\"\n              aria-label=\"outlined primary button group\"\n            >\n              <Button\n                type=\"submit\"\n                className={css.Btn}\n                onClick={() => onDeleteContact(id)}\n              >\n                Delete\n              </Button>\n            </ButtonGroup>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./Container.module.css\";\n\nconst Container = ({ children }) => {\n  return <div className={css.ContainerWrapper}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\nimport TextField from \"@mui/material/TextField\";\n\nconst Filter = ({ value, onFilterChange }) => {\n  return (\n    <div className=\"FilterWrapper\">\n      <form action=\"\">\n        <label htmlFor=\"\">\n          <p> Find contacts by name</p>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Filter\"\n            variant=\"outlined\"\n            placeholder=\"Find contacts\"\n            onChange={onFilterChange}\n            type=\"text\"\n            name=\"name\"\n            value={value}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n      </form>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  // bla: PropTypes.string,\n};\n\nFilter.defaultProps = {\n  // bla: 'test',\n};\n\nexport default Filter;\n","import { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Container from \"./components/Container/Container\";\nimport Filter from \"./components/Filter/Filter\";\n\nimport React from \"react\";\n\nfunction App() {\n  const initialContacts = [\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  ];\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [contacts, setContacts] = useState(() => {\n    return (\n      JSON.parse(window.localStorage.getItem(\"contacts\")) ?? initialContacts\n    );\n  });\n\n  //componentDidMount\n  useEffect(() => {\n    const contacts = window.localStorage.getItem(\"contacts\");\n    if (contacts) {\n      setContacts(JSON.parse(contacts));\n    } else setContacts(initialContacts);\n  }, []);\n\n  // componentDidUpdate\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleAddContact = (data) => {\n    if (contacts.some((contact) => contact.name === data.name)) {\n      alert(`${data.name} already exists`);\n      return;\n    }\n\n    setContacts((contacts) => {\n      const newContact = {\n        id: shortid.generate(),\n        ...data,\n      };\n      return [newContact, ...contacts];\n    });\n    setName(\"\");\n    setNumber(\"\");\n  };\n  const handleFilterChange = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const handleDeleteContact = (contactId) => {\n    setContacts(contacts.filter(({ id }) => id !== contactId));\n  };\n  const getVisibleContacts = (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  };\n  return (\n    <>\n      <Container className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm name={name} number={number} onSubmit={handleAddContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onFilterChange={handleFilterChange} />\n        <ContactList\n          contacts={getVisibleContacts(contacts, filter)}\n          onDeleteContact={handleDeleteContact}\n        />\n      </Container>\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}